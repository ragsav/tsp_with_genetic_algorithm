{"version":3,"sources":["logo.svg","ga/ga.js","ga/tsp.js","App.js","reportWebVitals.js","index.js"],"names":["calculateFitness","graph","chromosome","x1","y1","x2","y2","totalDist","i","path","length","source","target","x","y","Math","sqrt","shuffleArray","array","j","floor","random","temp","getInitialGeneration","n","cities","population","Array","from","_","fitness","unshift","push","mating","newPopulation","l","p1","p2","chromosomeLength","childPath","fill","randomArraySelector","slice","sort","vis","k","childChromosome","mutation","mutatedPopulation","a","b","GA","generations","initialPopulation","gen","concat","splice","result","size","plotNodes","ctx","beginPath","arc","PI","fillStyle","closePath","font","textAlign","fillText","toString","TSP","props","useState","setCtx","canvasRef","useRef","graphRef","gaSteps","setGASteps","status","setStatus","speed","setSpeed","setGenerations","setInitialPopulation","setCities","data","setData","over","useEffect","current","document","getElementById","getContext","height","width","graphNodes","round","id","generateRandomGraph","window","innerHeight","innerWidth","clearRect","localeCompare","interval","setInterval","next","done","state","value","moveTo","lineTo","strokeStyle","stroke","plotEdges","clearInterval","style","display","padding","Row","margin","Col","justifyContent","Button","variant","boxShadow","fontSize","onClick","e","preventDefault","fontWeight","border","borderRadius","min","max","step","onChange","ref","backgroundColor","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"0LAAe,I,4ECGTA,EAAmB,SAACC,EAAOC,GAG/B,IAFA,IAJgBC,EAAIC,EAAIC,EAAIC,EAIxBC,EAAY,EAEPC,EAAI,EAAGA,EAAIN,EAAWO,KAAKC,OAAS,EAAGF,IAAK,CACnD,IAAMG,EAASV,EAAMC,EAAWO,KAAKD,IAC/BI,EAASX,EAAMC,EAAWO,KAAKD,EAAI,IACzCD,IATcJ,EASQQ,EAAOE,EATXT,EAScO,EAAOG,EATjBT,EASoBO,EAAOC,EATvBP,EAS0BM,EAAOE,EARtDC,KAAKC,KAAK,SAACb,EAAKE,EAAO,GAAb,SAAkBD,EAAKE,EAAO,KAU/C,OAAOC,GAGT,SAASU,EAAaC,GACpB,IAAK,IAAIV,EAAIU,EAAMR,OAAS,EAAGF,EAAI,EAAGA,IAAK,CACzC,IAAIW,EAAIJ,KAAKK,MAAML,KAAKM,UAAYb,EAAI,IACpCc,EAAOJ,EAAMV,GACjBU,EAAMV,GAAKU,EAAMC,GACjBD,EAAMC,GAAKG,EAEb,OAAOJ,EAGT,IAAMK,EAAuB,SAACC,EAAGC,EAAQxB,GAEvC,IADA,IAAMyB,EAAa,GACVlB,EAAI,EAAGA,EAAIgB,EAAGhB,IAAK,CAC1B,IAAMN,EAAa,CACjBO,KAAMQ,EAAaU,MAAMC,KAAK,CAAElB,OAAQe,EAAS,IAAK,SAACI,EAAGrB,GAAJ,OAAUA,EAAI,MACpEsB,QAAS,GAEX5B,EAAWO,KAAKsB,QAAQ,GACxB7B,EAAWO,KAAKuB,KAAK,GACrB9B,EAAW4B,QAAU9B,EAAiBC,EAAOC,GAC7CwB,EAAWM,KAAX,eAAqB9B,IAEvB,OAAOwB,GAGHO,EAAS,SAACP,EAAYzB,GAI1B,IAFA,IAAMiC,EAAgB,GAChBC,GAFNT,EAAaT,EAAaS,IAELhB,OACZF,EAAI,EAAGA,EAAI2B,EAAI,EAAG3B,IAAK,CAC9B,IAAM4B,EAAKV,EAAWlB,GAChB6B,EAAKX,EAAWS,EAAI3B,EAAI,GACxB8B,EAAmBF,EAAG3B,KAAKC,OAE3B6B,EAAY,IAAIZ,MAAMS,EAAG3B,KAAKC,QAAQ8B,MAAM,GAE9CC,EAAsBxB,EACxBU,MAAMC,KAAK,CAAElB,OAAQ4B,EAAmB,IAAK,SAACT,EAAGrB,GAAJ,OAAUA,EAAI,OAG7DiC,EAAsBA,EAAoBC,MACxCD,EAAoB/B,OAAS,IAGXiC,OAGpB,IAFA,IAAMC,EAAMjB,MAAMW,GAAkBE,MAAK,GAEhCrB,EAAI,EAAGA,EAAIsB,EAAoB/B,OAAQS,IAC9CoB,EAAUE,EAAoBtB,IAAMiB,EAAG3B,KAAKgC,EAAoBtB,IAChEyB,EAAIR,EAAG3B,KAAKgC,EAAoBtB,MAAO,EAKzC,IAFA,IAAI0B,EAAI,EACJ1B,EAAI,EACDA,EAAImB,EAAmB,IACN,IAAlBC,EAAUpB,IACPyB,EAAIP,EAAG5B,KAAKoC,MACfN,EAAUpB,GAAKkB,EAAG5B,KAAKoC,GACvB1B,KAGA0B,KAGF1B,IAIJoB,EAAUD,EAAmB,GAAK,EAClC,IAAMQ,EAAkB,CAAErC,KAAM8B,EAAWT,QAAS,GACpDgB,EAAgBhB,QAAU9B,EAAiBC,EAAO6C,GAClDZ,EAAcF,KAAKc,GAGrB,OAAOZ,GAGHa,EAAW,SAACb,EAAejC,GAG/B,IAFA,IAAM+C,EAAoB,GACtBb,EAAID,EAAcxB,OACbF,EAAI,EAAGA,EAAI2B,EAAG3B,IACrBwC,EAAkBhB,KAAK,CAAEvB,KAAK,YAAKyB,EAAc1B,GAAGC,MAAOqB,QAAS,IAEtE,IAAK,IAAItB,EAAI,EAAGA,EAAI2B,EAAG3B,IAAK,CAC1B,IAAM8B,EAAmBU,EAAkBxC,GAAGC,KAAKC,OAC7CuC,EAAIlC,KAAKK,MAAML,KAAKM,UAAYiB,EAAmB,IAAM,EACzDY,EAAInC,KAAKK,MAAML,KAAKM,UAAYiB,EAAmB,IAAM,EACzDhB,EAAO0B,EAAkBxC,GAAGC,KAAKwC,GACvCD,EAAkBxC,GAAGC,KAAKwC,GAAKD,EAAkBxC,GAAGC,KAAKyC,GACzDF,EAAkBxC,GAAGC,KAAKyC,GAAK5B,EAC/B0B,EAAkBxC,GAAGsB,QAAU9B,EAC7BC,EACA+C,EAAkBxC,IAGtB,OAAOwC,GAyBMG,EAtBP,UAAG,SAALA,EAAgB1B,EAAQxB,EAAOmD,EAAaC,GAAvC,6EACL3B,EAAaH,EAAqB8B,EAAmB5B,EAAQxB,GACjD,GACPqD,EAAM,EAHN,YAGSA,EAAMF,GAHf,iBAkBP,OAbMlB,EAAgBD,EAAOP,EAAYzB,GAGnC+C,EAAoBD,EAASb,EAAejC,IAClDyB,EAAaA,EAAW6B,OAAOP,IAGpBL,MAAK,SAACM,EAAGC,GAClB,OAAID,EAAEnB,QAAUoB,EAAEpB,SAAiB,EAC/BmB,EAAEnB,QAAUoB,EAAEpB,QAAgB,EAC3B,KAETJ,EAAaA,EAAW8B,OAAO,EAAGH,GAjB3B,UAkBD,CAAEI,OAAQ/B,EAAW,GAAIgC,KAAMhC,EAAWhB,QAlBzC,QAG4B4C,IAH5B,oDAALH,M,OCjGAQ,EAAY,SAACC,EAAK3D,GAEtB,IADA,IAAIkC,EAAIlC,EAAMS,OACLF,EAAI,EAAGA,EAAI2B,EAAG3B,IACrBoD,EAAIC,YACJD,EAAIE,IAAI7D,EAAMO,GAAGK,EAAGZ,EAAMO,GAAGM,EAAG,GAAI,EAAG,EAAIC,KAAKgD,IAChDH,EAAII,UAAY,UAChBJ,EAAIpB,OACJoB,EAAIK,YACJL,EAAIM,KAAO,cACXN,EAAII,UAAY,QAChBJ,EAAIO,UAAY,SAChBP,EAAIQ,SAAS5D,EAAE6D,WAAYpE,EAAMO,GAAGK,EAAI,GAAKZ,EAAMO,GAAGM,EAAI,IAiP/CwD,EA7NH,SAACC,GACX,MAAsBC,mBAAS,MAA/B,mBAAOZ,EAAP,KAAYa,EAAZ,KACMC,EAAYC,iBAAO,MACnBC,EAAWD,iBAAO,MACxB,EAA8BH,mBAAS,MAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAA4BN,mBAAS,UAArC,mBAAOO,EAAP,KAAeC,EAAf,KACA,EAA0BR,mBAAS,KAAnC,mBAAOS,EAAP,KAAcC,EAAd,KACA,EAAsCV,mBAAS,IAA/C,mBAAOpB,EAAP,KAAoB+B,EAApB,KACA,EAAkDX,mBAAS,IAA3D,mBAAOnB,EAAP,KAA0B+B,EAA1B,KACA,EAA4BZ,mBAAS,IAArC,mBAAO/C,EAAP,KAAe4D,EAAf,KACA,EAAwBb,mBAAS,MAAjC,mBAAOc,EAAP,KAAaC,EAAb,KACA,EAAwBf,oBAAS,GAAjC,mBAAOgB,EAAP,UA4CA,OA1CAC,qBAAU,WACRX,EAAW3B,EAAG1B,EAAQmD,EAASc,QAAStC,EAAaC,MACpD,CAACD,EAAaC,IAEjBoC,qBAAU,WACR,GAAIf,GAAaA,EAAUgB,SAAWF,EAAM,CAC1C,IACM5B,EADS+B,SAASC,eAAe,UACpBC,WAAW,MAC9BjB,EAASc,QA9Da,SAAClE,EAAGsE,EAAQC,GAEtC,IADA,IAAMC,EAAa,GACVxF,EAAI,EAAGA,EAAIgB,EAAGhB,IAAK,CAC1B,IAAMK,EAAIE,KAAKkF,MAAMlF,KAAKM,UAAY0E,EAAQ,MAAQ,GAChDjF,EAAIC,KAAKkF,MAAMlF,KAAKM,UAAYyE,EAAS,MAAQ,GACvDE,EAAWhE,KAAK,CAAEkE,GAAI1F,EAAGK,IAAGC,MAE9B,OAAOkF,EAuDgBG,CACjB1E,EACA2E,OAAOC,YACPD,OAAOE,WAAa,KAEnB,OAAH1C,QAAG,IAAHA,KAAK2C,UAAU,EAAG,EAAGH,OAAOE,WAAa,IAAKF,OAAOC,aAErD1C,EAAUC,EAAKgB,EAASc,SACxBjB,EAAOb,GACPkB,EAAW3B,EAAG1B,EAAQmD,EAASc,QAAStC,EAAaC,OAEtD,CAACqB,EAAWjD,EAAQ+D,IAEvBC,qBAAU,WACR,GAAe,MAAXZ,GAAuD,IAApCE,EAAOyB,cAAc,WAAkB,CAC5D,IAAMC,EAAWC,aAAY,WAC3B,IAAMC,EAAO9B,EAAQ8B,OACrB,GAAIA,EAAKC,KAKP,OAJA5B,EAAU,eACVF,EACE3B,EAAG1B,EAAQmD,EAASc,QAAStC,EAAaC,IAI9C,IAAMwD,EAAQF,EAAKG,MACnBvB,EAAQsB,GA9DE,SAACjD,EAAK3D,EAAOwD,GAC1B,OAAHG,QAAG,IAAHA,KAAK2C,UAAU,EAAG,EAAGH,OAAOE,WAAa,IAAKF,OAAOC,aAIrD,IADA,IAAIlE,EAAIsB,EAAO/C,OACNF,EAAI,EAAGA,EAAI2B,EAAI,EAAG3B,IACzBoD,EAAIC,YACJD,EAAImD,OAAO9G,EAAMwD,EAAOjD,IAAIK,EAAGZ,EAAMwD,EAAOjD,IAAIM,GAChD8C,EAAIoD,OAAO/G,EAAMwD,EAAOjD,EAAI,IAAIK,EAAGZ,EAAMwD,EAAOjD,EAAI,IAAIM,GACxD8C,EAAIqD,YAAc,UAClBrD,EAAIsD,SAGNvD,EAAUC,EAAK3D,GAkDTkH,CAAUvD,EAAKgB,EAASc,QAASmB,EAAMpD,OAAOhD,QAC7CwE,GACH,OAAO,WACLmC,cAAcX,OAGjB,CAAC5B,EAASE,EAAQE,EAAO5B,EAAmBD,EAAa3B,IAG1D,sBAAK4F,MAAO,CAAEC,QAAS,QAAvB,UACE,sBAAKD,MAAO,CAAEtB,MAAO,IAAKD,OAAQM,OAAOC,YAAakB,QAAS,GAA/D,UACE,eAACC,EAAA,EAAD,CAAKH,MAAO,CAAEE,QAAS,kBAAmBE,OAAQ,GAAlD,UACE,cAACC,EAAA,EAAD,CACEL,MAAO,CACLE,QAAS,EACTE,OAAQ,EACRE,eAAgB,aAChBL,QAAS,QALb,SAQE,cAACM,EAAA,EAAD,CACEC,QACsC,IAApC9C,EAAOyB,cAAc,WAAmB,OAAS,UAEnDa,MAAO,CACLE,QAAS,kBACTO,UAAW,OACXC,SAAU,IAEZC,QAAS,SAACC,GACRA,EAAEC,iBACkC,IAApCnD,EAAOyB,cAAc,WACjBxB,EAAU,UACVA,EAAU,YAblB,SAgBuC,IAApCD,EAAOyB,cAAc,WAAmB,QAAU,WAIvD,cAACkB,EAAA,EAAD,CAAKL,MAAO,CAAEE,QAAS,EAAGE,OAAQ,GAAlC,SACGnC,EACC,sBACE+B,MAAO,CAAEU,SAAU,GAAII,WAAY,MAAOhE,UAAW,SADvD,mCAEqBpD,KAAKK,MAAMkE,EAAK7B,OAAO3B,YAC1C,UAGR,eAAC0F,EAAA,EAAD,CACEH,MAAO,CACLE,QAAS,EACTE,OAAQ,kBACRW,OAAQ,oBACRC,aAAc,GALlB,UAQE,cAACX,EAAA,EAAD,CAAKL,MAAO,CAAEE,QAAS,EAAGE,OAAQ,GAAlC,SACE,cAAC,iBAAD,CACEa,IAAK,IACLC,IAAK,IACLzB,MAAO7B,EACPuD,KAAM,IACNC,SAAU,SAACR,GACTA,EAAEC,iBACFhD,EAAS+C,EAAErH,OAAOkG,QAEpBO,MAAO,CAAEI,OAAQ,EAAGF,QAAS,OAGjC,cAACG,EAAA,EAAD,CACEL,MAAO,CAAEE,QAAS,EAAGE,OAAQ,EAAGM,SAAU,GAAII,WAAY,OAD5D,SAGE,iDAAkBlD,UAItB,eAACuC,EAAA,EAAD,CACEH,MAAO,CACLE,QAAS,EACTE,OAAQ,kBACRW,OAAQ,oBACRC,aAAc,GALlB,UAQE,cAACX,EAAA,EAAD,CAAKL,MAAO,CAAEE,QAAS,EAAGE,OAAQ,GAAlC,SACE,cAAC,iBAAD,CACEa,IAAK,EACLC,IAAK,IACLzB,MAAOzD,EACPmF,KAAM,EACNC,SAAU,SAACR,GACTA,EAAEC,iBACF9C,EAAqB6C,EAAErH,OAAOkG,QAEhCO,MAAO,CAAEI,OAAQ,EAAGF,QAAS,OAGjC,cAACG,EAAA,EAAD,CACEL,MAAO,CAAEE,QAAS,EAAGE,OAAQ,EAAGM,SAAU,GAAII,WAAY,OAD5D,SAGE,8DAA+B9E,UAInC,eAACmE,EAAA,EAAD,CACEH,MAAO,CACLE,QAAS,EACTE,OAAQ,kBACRW,OAAQ,oBACRC,aAAc,GALlB,UAQE,cAACX,EAAA,EAAD,CAAKL,MAAO,CAAEE,QAAS,EAAGE,OAAQ,GAAlC,SACE,cAAC,iBAAD,CACEa,IAAK,EACLC,IAAK,IACLzB,MAAO1D,EACPoF,KAAM,EACNC,SAAU,SAACR,GACTA,EAAEC,iBACF/C,EAAe8C,EAAErH,OAAOkG,QAE1BO,MAAO,CAAEI,OAAQ,EAAGF,QAAS,OAGjC,cAACG,EAAA,EAAD,CACEL,MAAO,CAAEE,QAAS,EAAGE,OAAQ,EAAGM,SAAU,GAAII,WAAY,OAD5D,SAGE,uDAAwB/E,UAG5B,eAACoE,EAAA,EAAD,CACEH,MAAO,CACLE,QAAS,EACTE,OAAQ,kBACRW,OAAQ,oBACRC,aAAc,GALlB,UAQE,cAACX,EAAA,EAAD,CAAKL,MAAO,CAAEE,QAAS,EAAGE,OAAQ,GAAlC,SACE,cAAC,iBAAD,CACEa,IAAK,EACLC,IAAK,GACLzB,MAAOrF,EACP+G,KAAM,EACNC,SAAU,SAACR,GACTA,EAAEC,iBACF7C,EAAU4C,EAAErH,OAAOkG,QAErBO,MAAO,CAAEI,OAAQ,EAAGF,QAAS,OAGjC,cAACG,EAAA,EAAD,CACEL,MAAO,CAAEE,QAAS,EAAGE,OAAQ,EAAGM,SAAU,GAAII,WAAY,OAD5D,SAGE,kDAAmB1G,aAIzB,qBACE4F,MAAO,CAAEtB,MAAOK,OAAOE,WAAa,IAAKR,OAAQM,OAAOC,aAD1D,SAGE,wBACEH,GAAG,SACHwC,IAAKhE,EACLqB,MAAOK,OAAOE,WAAa,IAC3BR,OAAQM,OAAOC,YACfgB,MAAO,CAAEsB,gBAAiB,mB,MCxPrBC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF9D,SAASC,eAAe,SAM1BkD,M","file":"static/js/main.c7ff8b2d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const distance = (x1, y1, x2, y2) => {\r\n  return Math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2);\r\n};\r\nconst calculateFitness = (graph, chromosome) => {\r\n  let totalDist = 0;\r\n\r\n  for (let i = 0; i < chromosome.path.length - 1; i++) {\r\n    const source = graph[chromosome.path[i]];\r\n    const target = graph[chromosome.path[i + 1]];\r\n    totalDist += distance(source.x, source.y, target.x, target.y);\r\n  }\r\n  return totalDist;\r\n};\r\n\r\nfunction shuffleArray(array) {\r\n  for (var i = array.length - 1; i > 0; i--) {\r\n    var j = Math.floor(Math.random() * (i + 1));\r\n    var temp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n  }\r\n  return array;\r\n}\r\n\r\nconst getInitialGeneration = (n, cities, graph) => {\r\n  const population = [];\r\n  for (let i = 0; i < n; i++) {\r\n    const chromosome = {\r\n      path: shuffleArray(Array.from({ length: cities - 1 }, (_, i) => i + 1)),\r\n      fitness: 0,\r\n    };\r\n    chromosome.path.unshift(0);\r\n    chromosome.path.push(0);\r\n    chromosome.fitness = calculateFitness(graph, chromosome);\r\n    population.push({ ...chromosome });\r\n  }\r\n  return population;\r\n};\r\n\r\nconst mating = (population, graph) => {\r\n  population = shuffleArray(population);\r\n  const newPopulation = [];\r\n  const l = population.length;\r\n  for (let i = 0; i < l / 2; i++) {\r\n    const p1 = population[i];\r\n    const p2 = population[l - i - 1];\r\n    const chromosomeLength = p1.path.length;\r\n    //making child path using the parent paths\r\n    const childPath = new Array(p1.path.length).fill(-1);\r\n\r\n    let randomArraySelector = shuffleArray(\r\n      Array.from({ length: chromosomeLength - 2 }, (_, i) => i + 1)\r\n    );\r\n\r\n    randomArraySelector = randomArraySelector.slice(\r\n      randomArraySelector.length / 2\r\n    );\r\n\r\n    randomArraySelector.sort();\r\n    const vis = Array(chromosomeLength).fill(false);\r\n\r\n    for (let j = 1; j < randomArraySelector.length; j++) {\r\n      childPath[randomArraySelector[j]] = p1.path[randomArraySelector[j]];\r\n      vis[p1.path[randomArraySelector[j]]] = true;\r\n    }\r\n\r\n    let k = 0;\r\n    let j = 0;\r\n    while (j < chromosomeLength - 1) {\r\n      if (childPath[j] === -1) {\r\n        if (!vis[p2.path[k]]) {\r\n          childPath[j] = p2.path[k];\r\n          j++;\r\n          k++;\r\n        } else {\r\n          k++;\r\n        }\r\n      } else {\r\n        j++;\r\n      }\r\n    }\r\n\r\n    childPath[chromosomeLength - 1] = 0;\r\n    const childChromosome = { path: childPath, fitness: 0 };\r\n    childChromosome.fitness = calculateFitness(graph, childChromosome);\r\n    newPopulation.push(childChromosome);\r\n  }\r\n\r\n  return newPopulation;\r\n};\r\n\r\nconst mutation = (newPopulation, graph) => {\r\n  const mutatedPopulation = [];\r\n  let l = newPopulation.length;\r\n  for (let i = 0; i < l; i++) {\r\n    mutatedPopulation.push({ path: [...newPopulation[i].path], fitness: 0 });\r\n  }\r\n  for (let i = 0; i < l; i++) {\r\n    const chromosomeLength = mutatedPopulation[i].path.length;\r\n    const a = Math.floor(Math.random() * (chromosomeLength - 3)) + 1;\r\n    const b = Math.floor(Math.random() * (chromosomeLength - 3)) + 1;\r\n    const temp = mutatedPopulation[i].path[a];\r\n    mutatedPopulation[i].path[a] = mutatedPopulation[i].path[b];\r\n    mutatedPopulation[i].path[b] = temp;\r\n    mutatedPopulation[i].fitness = calculateFitness(\r\n      graph,\r\n      mutatedPopulation[i]\r\n    );\r\n  }\r\n  return mutatedPopulation;\r\n};\r\n\r\nconst GA = function* (cities, graph, generations, initialPopulation) {\r\n  var population = getInitialGeneration(initialPopulation, cities, graph);\r\n  const results = [];\r\n  for (let gen = 0; gen < generations; gen++) {\r\n    //mating\r\n    const newPopulation = mating(population, graph);\r\n\r\n    //mutation\r\n    const mutatedPopulation = mutation(newPopulation, graph);\r\n    population = population.concat(mutatedPopulation);\r\n\r\n    //selection\r\n    population.sort((a, b) => {\r\n      if (a.fitness < b.fitness) return -1;\r\n      if (a.fitness > b.fitness) return 1;\r\n      return 0;\r\n    });\r\n    population = population.splice(0, initialPopulation);\r\n    yield { result: population[0], size: population.length };\r\n  }\r\n};\r\n\r\nexport default GA;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport { Row, Button, Col } from \"react-bootstrap\";\r\nimport { RangeStepInput } from \"react-range-step-input\";\r\nimport GA from \"./ga\";\r\n\r\nconst generateRandomGraph = (n, height, width) => {\r\n  const graphNodes = [];\r\n  for (let i = 0; i < n; i++) {\r\n    const x = Math.round(Math.random() * (width - 100)) + 50;\r\n    const y = Math.round(Math.random() * (height - 100)) + 50;\r\n    graphNodes.push({ id: i, x, y });\r\n  }\r\n  return graphNodes;\r\n};\r\n\r\nconst plotNodes = (ctx, graph) => {\r\n  let l = graph.length;\r\n  for (let i = 0; i < l; i++) {\r\n    ctx.beginPath();\r\n    ctx.arc(graph[i].x, graph[i].y, 10, 0, 2 * Math.PI);\r\n    ctx.fillStyle = \"#FF0000\";\r\n    ctx.fill();\r\n    ctx.closePath();\r\n    ctx.font = \"8pt Calibri\";\r\n    ctx.fillStyle = \"white\";\r\n    ctx.textAlign = \"center\";\r\n    ctx.fillText(i.toString(), graph[i].x - 0.5, graph[i].y + 3);\r\n  }\r\n};\r\n\r\nconst plotEdges = (ctx, graph, result) => {\r\n  ctx?.clearRect(0, 0, window.innerWidth - 300, window.innerHeight);\r\n  // plotEdges(ctx, graphRef.current);\r\n\r\n  let l = result.length;\r\n  for (let i = 0; i < l - 1; i++) {\r\n    ctx.beginPath();\r\n    ctx.moveTo(graph[result[i]].x, graph[result[i]].y);\r\n    ctx.lineTo(graph[result[i + 1]].x, graph[result[i + 1]].y);\r\n    ctx.strokeStyle = \"#40FF00\";\r\n    ctx.stroke();\r\n  }\r\n\r\n  plotNodes(ctx, graph);\r\n};\r\n\r\nconst TSP = (props) => {\r\n  const [ctx, setCtx] = useState(null);\r\n  const canvasRef = useRef(null);\r\n  const graphRef = useRef(null);\r\n  const [gaSteps, setGASteps] = useState(null);\r\n  const [status, setStatus] = useState(\"Paused\");\r\n  const [speed, setSpeed] = useState(200);\r\n  const [generations, setGenerations] = useState(20);\r\n  const [initialPopulation, setInitialPopulation] = useState(10);\r\n  const [cities, setCities] = useState(10);\r\n  const [data, setData] = useState(null);\r\n  const [over, setOver] = useState(true);\r\n\r\n  useEffect(() => {\r\n    setGASteps(GA(cities, graphRef.current, generations, initialPopulation));\r\n  }, [generations, initialPopulation]);\r\n\r\n  useEffect(() => {\r\n    if (canvasRef && canvasRef.current && over) {\r\n      const canvas = document.getElementById(\"canvas\");\r\n      const ctx = canvas.getContext(\"2d\");\r\n      graphRef.current = generateRandomGraph(\r\n        cities,\r\n        window.innerHeight,\r\n        window.innerWidth - 300\r\n      );\r\n      ctx?.clearRect(0, 0, window.innerWidth - 300, window.innerHeight);\r\n      // plotEdges(ctx, graphRef.current);\r\n      plotNodes(ctx, graphRef.current);\r\n      setCtx(ctx);\r\n      setGASteps(GA(cities, graphRef.current, generations, initialPopulation));\r\n    }\r\n  }, [canvasRef, cities, over]);\r\n\r\n  useEffect(() => {\r\n    if (gaSteps != null && status.localeCompare(\"Playing\") === 0) {\r\n      const interval = setInterval(() => {\r\n        const next = gaSteps.next();\r\n        if (next.done) {\r\n          setStatus(\"Paused\");\r\n          setGASteps(\r\n            GA(cities, graphRef.current, generations, initialPopulation)\r\n          );\r\n          return;\r\n        }\r\n        const state = next.value;\r\n        setData(state);\r\n        plotEdges(ctx, graphRef.current, state.result.path);\r\n      }, speed);\r\n      return () => {\r\n        clearInterval(interval);\r\n      };\r\n    }\r\n  }, [gaSteps, status, speed, initialPopulation, generations, cities]);\r\n\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      <div style={{ width: 300, height: window.innerHeight, padding: 4 }}>\r\n        <Row style={{ padding: \"2px 0px 2px 0px\", margin: 0 }}>\r\n          <Col\r\n            style={{\r\n              padding: 2,\r\n              margin: 0,\r\n              justifyContent: \"flex-start\",\r\n              display: \"flex\",\r\n            }}\r\n          >\r\n            <Button\r\n              variant={\r\n                status.localeCompare(\"Playing\") === 0 ? \"dark\" : \"success\"\r\n              }\r\n              style={{\r\n                padding: \"2px 8px 2px 8px\",\r\n                boxShadow: \"none\",\r\n                fontSize: 12,\r\n              }}\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                status.localeCompare(\"Playing\") === 0\r\n                  ? setStatus(\"Paused\")\r\n                  : setStatus(\"Playing\");\r\n              }}\r\n            >\r\n              {status.localeCompare(\"Playing\") === 0 ? \"Pause\" : \"Play\"}\r\n            </Button>\r\n          </Col>\r\n\r\n          <Col style={{ padding: 2, margin: 0 }}>\r\n            {data ? (\r\n              <span\r\n                style={{ fontSize: 12, fontWeight: \"500\", textAlign: \"right\" }}\r\n              >{`Best distance : ${Math.floor(data.result.fitness)}`}</span>\r\n            ) : null}\r\n          </Col>\r\n        </Row>\r\n        <Row\r\n          style={{\r\n            padding: 2,\r\n            margin: \"2px 0px 2px 0px\",\r\n            border: \"1px solid #676767\",\r\n            borderRadius: 4,\r\n          }}\r\n        >\r\n          <Col style={{ padding: 2, margin: 0 }}>\r\n            <RangeStepInput\r\n              min={100}\r\n              max={2000}\r\n              value={speed}\r\n              step={100}\r\n              onChange={(e) => {\r\n                e.preventDefault();\r\n                setSpeed(e.target.value);\r\n              }}\r\n              style={{ margin: 0, padding: 0 }}\r\n            />\r\n          </Col>\r\n          <Col\r\n            style={{ padding: 2, margin: 0, fontSize: 12, fontWeight: \"600\" }}\r\n          >\r\n            <span>{`Speed : ${speed}`}</span>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row\r\n          style={{\r\n            padding: 2,\r\n            margin: \"2px 0px 2px 0px\",\r\n            border: \"1px solid #676767\",\r\n            borderRadius: 4,\r\n          }}\r\n        >\r\n          <Col style={{ padding: 2, margin: 0 }}>\r\n            <RangeStepInput\r\n              min={5}\r\n              max={100}\r\n              value={initialPopulation}\r\n              step={1}\r\n              onChange={(e) => {\r\n                e.preventDefault();\r\n                setInitialPopulation(e.target.value);\r\n              }}\r\n              style={{ margin: 0, padding: 0 }}\r\n            />\r\n          </Col>\r\n          <Col\r\n            style={{ padding: 2, margin: 0, fontSize: 12, fontWeight: \"600\" }}\r\n          >\r\n            <span>{`Initial population : ${initialPopulation}`}</span>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row\r\n          style={{\r\n            padding: 2,\r\n            margin: \"2px 0px 2px 0px\",\r\n            border: \"1px solid #676767\",\r\n            borderRadius: 4,\r\n          }}\r\n        >\r\n          <Col style={{ padding: 2, margin: 0 }}>\r\n            <RangeStepInput\r\n              min={1}\r\n              max={200}\r\n              value={generations}\r\n              step={1}\r\n              onChange={(e) => {\r\n                e.preventDefault();\r\n                setGenerations(e.target.value);\r\n              }}\r\n              style={{ margin: 0, padding: 0 }}\r\n            />\r\n          </Col>\r\n          <Col\r\n            style={{ padding: 2, margin: 0, fontSize: 12, fontWeight: \"600\" }}\r\n          >\r\n            <span>{`Generations : ${generations}`}</span>\r\n          </Col>\r\n        </Row>\r\n        <Row\r\n          style={{\r\n            padding: 2,\r\n            margin: \"2px 0px 2px 0px\",\r\n            border: \"1px solid #676767\",\r\n            borderRadius: 4,\r\n          }}\r\n        >\r\n          <Col style={{ padding: 2, margin: 0 }}>\r\n            <RangeStepInput\r\n              min={1}\r\n              max={40}\r\n              value={cities}\r\n              step={1}\r\n              onChange={(e) => {\r\n                e.preventDefault();\r\n                setCities(e.target.value);\r\n              }}\r\n              style={{ margin: 0, padding: 0 }}\r\n            />\r\n          </Col>\r\n          <Col\r\n            style={{ padding: 2, margin: 0, fontSize: 12, fontWeight: \"600\" }}\r\n          >\r\n            <span>{`Cities : ${cities}`}</span>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n      <div\r\n        style={{ width: window.innerWidth - 300, height: window.innerHeight }}\r\n      >\r\n        <canvas\r\n          id=\"canvas\"\r\n          ref={canvasRef}\r\n          width={window.innerWidth - 300}\r\n          height={window.innerHeight}\r\n          style={{ backgroundColor: \"#222222\" }}\r\n        ></canvas>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TSP;\r\n","import logo from './logo.svg';\nimport './App.css';\nimport TSP from \"./ga/tsp\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TSP></TSP>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}